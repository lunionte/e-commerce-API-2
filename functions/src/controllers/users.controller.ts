import { Request, Response } from "express";
import { User } from "../models/user.model.js";
import { UserService } from "../services/user.service.js";

// 游댠 CAMADA RESPONS츼VEL POR RECEBER AS REQUISI칂칏ES HTTP
// Cada m칠todo do controller representa um verbo HTTP (GET, POST, PUT, DELETE)
// O controller recebe os dados da requisi칞칚o (req), repassa para o service
// que executa a regra de neg칩cio, e ent칚o envia a resposta (res) para o cliente.

export class UsersController {
    static async getAll(req: Request, res: Response) {
        // #swagger.tags = ['Users']
        // #swagger.summary = Listagem de usu치rios
        // #swagger.description = 'Retorna todos os usu치rios dispon칤veis no sistema.'
        res.json(await new UserService().getAll());
    }

    static async getById(req: Request, res: Response) {
        // #swagger.tags = ['Users']
        // #swagger.summary = Detalhes do usu치rio
        // #swagger.description = 'Retorna os detalhes do usu치rio especificado pelo ID.'
        const userId = req.params.id;
        res.json(await new UserService().getById(userId));
    }

    static async save(req: Request, res: Response) {
        // #swagger.tags = ['Users']
        // #swagger.summary = Cria칞칚o de usu치rio
        // #swagger.description = 'Cria um novo usu치rio no sistema.'

        /*  #swagger.requestBody = {
            required: true,
            content: {
                "application/json": {
                    schema: {
                        $ref: "#/components/schemas/addUser"
                    }
                }
            }
        } 
        */

        const user = req.body as User;
        await new UserService().save(user);
        res.status(201).json({
            message: `Usu치rio criado com sucesso!`,
        });
    }

    static async update(req: Request, res: Response) {
        // #swagger.tags = ['Users']
        // #swagger.summary = Atualiza칞칚o de usu치rio
        // #swagger.description = 'Atualiza os dados do usu치rio especificado pelo ID.'
        /* #swagger.requestBody = {
             required: true,
             content: {
                 "application/json": {
                     schema: {
                         $ref: "#/components/schemas/updateUser"
                     }
                 }
             }
         } */

        const userId = req.params.id;
        const user = req.body as User;
        await new UserService().update(userId, user);
        res.json({
            message: "Usu치rio alterado com sucesso!",
        });
    }

    static async delete(req: Request, res: Response) {
        // #swagger.tags = ['Users']
        // #swagger.summary = Exclus칚o de usu치rio
        // #swagger.description = 'Exclui o usu치rio especificado pelo ID.'

        const userId = req.params.id;
        await new UserService().delete(userId);
        res.status(204).end();
    }
}
